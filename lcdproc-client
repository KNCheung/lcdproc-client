#!/usr/bin/python

import os, sys, signal
import fcntl
from time import sleep
from lcdproc.server import Server

import threading
import subprocess

import ConfigParser

import click

from screens import *

def start(configure_file, pipe, pidFile, screen):
    def sigTermHandler(f):
        def handler(a, b):
            print("received SIGTERM")
            fcntl.flock(f.fileno(), fcntl.LOCK_UN)
            f.close()
            sys.exit(0)
        return handler

    print("Staring...")
    print("pid:{0}".format(os.getpid())) 
    try:
        f = open(pidFile, "a+")
        fcntl.flock(f.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
        f.seek(0)
        f.truncate()
        f.write("{0}\n".format(os.getpid()))
        f.flush()
        f.seek(0)
    except IOError as e:
        print("lcdproc-client's running")
        f = open(pidFile, "r")
        print("{0}".format(f.read()))
        f.close()
        sys.exit(11)

    try:
        os.mkfifo(pipe)
    except:
        print("PIPE file exists")

    signal.signal(signal.SIGTERM, sigTermHandler(f))
    config = ConfigParser.SafeConfigParser()
    config.read(configure_file)

    lcd = Server(debug=False)
    lcd.start_session()

    pool = []

    if screen:
        try:
            pool.append(screens[screen](lcd, configFile=config))
        except KeyError:
            print("Screen <{0}> Not Found".format(screen))
            sys.exit(2)
    else:
        for scr in config.sections():
            if config.has_option(scr, 'active') and config.getboolean(scr, 'active'): 
                pool.append(screens[scr](lcd, configFile=config))

    for t in pool:
        t.setDaemon(True)
        t.start()

    fifo = open(pipe, 'r')
    while True:
        s = fifo.readline()
        if not s:
            sleep(1)
        else:
            line1 = s
            s = fifo.readline()
            if s:
                line2 = s
            else:
                line2 = ''
            notification = Notify(lcd, line1+line2, 3)
            notification.start()
            notification.join()
            while fifo.readline():
                pass

def stop(pidFile):
    print("Stopping...")
    if os.path.exists(pidFile):
        f = open(pidFile, 'a+')
        try:
            fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError:
            f = open(pidFile, 'r')
            pid = int(f.read())
            f.close()
            print('PID:{0} is running'.format(pid))
            os.kill(pid, signal.SIGTERM)
            return
        f.close()
    print("Not running")

@click.command()
@click.argument('command', default='start')
@click.option('-c', '--configure-file', default='/etc/lcdproc-client.conf', help='Configure file')
@click.option('--pipe', default='/tmp/lcdproc-client.fifo', help='Select pipe file\'s location')
@click.option('-p', '--pid', default='/tmp/lcdproc-client.pid', help='Select pid file\'s location')
@click.option('-s', '--screen', default='', help='display only one screen')
def main(command, configure_file, pipe, pid, screen):
    cmd = command.lower()
    if command == 'start':
        start(configure_file, pipe, pid, screen)
    elif command == 'stop':
        stop(pid)
    elif command == 'restart':
        stop(pid)
        sleep(1)
        start(configure_file, pipe, pid, screen)
    else:
        print("unknow command: {0}".format(command))

if __name__ == "__main__":
    main()
